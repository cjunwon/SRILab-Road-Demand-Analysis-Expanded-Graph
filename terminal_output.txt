(env) junwonchoi@Junwons-MacBook-Pro task_4_junwon_centrality_big_graph % source ./env/bin/activate

---------------------------------------------------------------------------------------------------------------------------

(env) (env) junwonchoi@Junwons-MacBook-Pro task_4_junwon_centrality_big_graph % python 01_block_determination.py 
Importing libraries...
Loading data...
/Volumes/JC SSD/SRILab/task_4_junwon_centrality_big_graph/01_block_determination.py:18: DeprecationWarning: numpy.core.numeric is deprecated and has been renamed to numpy._core.numeric. The numpy._core namespace contains private NumPy internals and its use is discouraged, as NumPy internals can change without warning in any release. In practice, most real-world usage of numpy.core is to access functionality in the public NumPy API. If that is the case, use the public NumPy API. If not, you are using NumPy internals. If you would still like to access an internal attribute, use numpy._core.numeric._frombuffer.
  B_matrix_sliced,B_matrix_str_sliced,nodes_coordinates_array = pickle.load(handle)
Subsetting block data...
Separating node coordinates...
Creating dictionary mapping block boundaries to their indices...
Creating R-tree index...
Identifying nodes that are in a block using R-tree...
Filtering nodes: 100%|███████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████| 199504/199504 [04:40<00:00, 710.98it/s]
Identifying the closest block for each node that is not in any block...
Identifying closest blocks: 100%|█████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████| 67/67 [00:38<00:00,  1.74it/s]
Identification complete.
Total nodes identified: 199504
Saving Node_Block as a pickle file...

---------------------------------------------------------------------------------------------------------------------------

(env) (env) junwonchoi@Junwons-MacBook-Pro task_4_junwon_centrality_big_graph % python 02_block_node_pairing.py 
Importing libraries...
Loading files...
Number of unique nodes:  199504
Initializing dictionary...
Mapping blocks to nodes...
Mapping nodes to work and home blocks...
Removing rows where the node columns are missing...
Checking if each row in Block_to_Block_Pairs array is a unique pair...
All Block_to_Block_Pairs are unique:  True
Adjusting LODES info by dividing by the number of block pairings...
Creating Node_to_Node_pairs...
Dumping Node_to_Node_pairs as a pickle file...
Dumping Origin_Destination_Node_Added_array as a pickle file...
Exporting block_pairing_count_list to a pickle file...
Exporting Block_to_Block_Pairs, LODES_adjusted, block_pairing_count_list to a pickle file together...

---------------------------------------------------------------------------------------------------------------------------

(env) (env) junwonchoi@Junwons-MacBook-Pro task_4_junwon_centrality_big_graph % python 03_igraph_generation.py
Importing nodes_edges_ucla_access.pickle...
/Volumes/JC SSD/SRILab/task_4_junwon_centrality_big_graph/03_igraph_generation.py:9: DeprecationWarning: numpy.core.numeric is deprecated and has been renamed to numpy._core.numeric. The numpy._core namespace contains private NumPy internals and its use is discouraged, as NumPy internals can change without warning in any release. In practice, most real-world usage of numpy.core is to access functionality in the public NumPy API. If that is the case, use the public NumPy API. If not, you are using NumPy internals. If you would still like to access an internal attribute, use numpy._core.numeric._frombuffer.
  B_matrix_sliced,B_matrix_str_sliced,nodes_coordinates_array = pickle.load(handle)
Creating graph using B_matrix_sliced...
Adding edges: 100%|██████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████| 267889/267889 [1:30:38<00:00, 49.25it/s]
Time taken to create graph: 90.64858411550522 minutes
Exporting graph to intermediate_files/igraph.pickle...

---------------------------------------------------------------------------------------------------------------------------

(env) (env) junwonchoi@Junwons-MacBook-Pro task_4_junwon_centrality_big_graph % python 03_igraph_viz.py
Importing libraries...
Loading files...
/Volumes/JC SSD/SRILab/task_4_junwon_centrality_big_graph/03_igraph_viz.py:15: DeprecationWarning: numpy.core.numeric is deprecated and has been renamed to numpy._core.numeric. The numpy._core namespace contains private NumPy internals and its use is discouraged, as NumPy internals can change without warning in any release. In practice, most real-world usage of numpy.core is to access functionality in the public NumPy API. If that is the case, use the public NumPy API. If not, you are using NumPy internals. If you would still like to access an internal attribute, use numpy._core.numeric._frombuffer.
  B_matrix_sliced,B_matrix_str_sliced,nodes_coordinates_array = pickle.load(handle)
Finding all tuple pairs in Node_to_Node_pairs where the first element is 107504...
Using igraph's Dijkstra algorithm to find the shortest paths...
Plotting igraph results...
Using NetworkX's Dijkstra algorithm to find the shortest paths...
Plotting NetworkX results...

---------------------------------------------------------------------------------------------------------------------------

(env) (env) junwonchoi@Junwons-MacBook-Pro task_4_junwon_centrality_big_graph % python 04_combined_shortest_path_usage.py
Importing libraries...
Creating Node_to_Node_pairs_dict...
Creating chunks of Node_to_Node_pairs_dict_subset...
Number of chunks to process: 15625
...
Time taken to find shortest paths for chunk  15624 :  0.012231751283009847 minutes
Total time for B_matrix update: 2.14729905128479 seconds
Time getting path and lodes values: 0.08228158950805664 seconds
Time updating matrix: 2.062411069869995 seconds
Processing chunk 15625/15625...
Time taken to find shortest paths for chunk  15625 :  0.0050241986910502115 minutes
Total time for B_matrix update: 0.8959650993347168 seconds
Time getting path and lodes values: 0.03581547737121582 seconds
Time updating matrix: 0.8591372966766357 seconds
Converting B_matrix_weighted_dict back to B_matrix_weighted_array...
Percent of B_matrix_weighted_array updated:  93.37524123797543 %
Time taken to convert B_matrix_weighted_dict back to B_matrix_weighted_array:  0.0014394998550415039 minutes
Time taken for all chunks:  1073.950982884566 minutes
Estimated time for all pairs:  17.8991830480761 hours
Number of missing paths:  2079272
Percentage of missing paths: 2.360290392845108%
Exporting B_matrix_weighted_array to intermediate_files/B_matrix_weighted_array.pickle...

---------------------------------------------------------------------------------------------------------------------------

(env) (env) junwonchoi@Junwons-MacBook-Pro task_4_junwon_centrality_big_graph % python 05_lodes_to_udf.py
Importing libraries...
Importing B_matrix_weighted_array_0_to_156243.pickle...
Importing nodes_edges_ucla_access.pickle...
/Volumes/JC SSD/SRILab/task_4_junwon_centrality_big_graph/05_lodes_to_udf.py:17: DeprecationWarning: numpy.core.numeric is deprecated and has been renamed to numpy._core.numeric. The numpy._core namespace contains private NumPy internals and its use is discouraged, as NumPy internals can change without warning in any release. In practice, most real-world usage of numpy.core is to access functionality in the public NumPy API. If that is the case, use the public NumPy API. If not, you are using NumPy internals. If you would still like to access an internal attribute, use numpy._core.numeric._frombuffer.
  B_matrix_sliced,B_matrix_str_sliced,nodes_coordinates_array = pickle.load(handle)
Importing ucla_large_centrality_roi.geojson...
Percent of B_matrix updated from script 04_combined_shortest_path_usage.py:  100.0 %
Allocating B_matrix values...
Updating normalized values in udf_UPDATED_LODES...
Exporting udf_UPDATED_LODES to ucla_large_centrality_roi_UPDATED_LODES_2021.geojson...
Percent of S000_adjusted == 0:  6.78 %
Percent of SA01_adjusted == 0:  16.57 %
Percent of SA02_adjusted == 0:  13.55 %
Percent of SA03_adjusted == 0:  14.65 %
Percent of SE01_adjusted == 0:  15.89 %
Percent of SE02_adjusted == 0:  14.53 %
Percent of SE03_adjusted == 0:  14.36 %
Percent of SI01_adjusted == 0:  21.59 %
Percent of SI02_adjusted == 0:  18.32 %
Percent of SI03_adjusted == 0:  13.48 %